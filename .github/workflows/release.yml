name: Create Release with CalVer

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'trivy-scanning.template.yaml'
      - 'trivy.default.yaml'
      - 'config-checks.template.yaml'
      - 'license-checks.template.yaml'
      - 'security-checks.template.yaml'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force create release even without changes'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate CalVer version
        id: version
        run: |
          # Generate CalVer version (YY.MM.DD.micro)
          YEAR=$(date +%y)
          MONTH=$(date +%m)
          DAY=$(date +%d)
          
          # Get the latest tag for today to determine micro version
          TODAY_TAG_PREFIX="v${YEAR}.${MONTH}.${DAY}"
          LATEST_TODAY_TAG=$(git tag -l "${TODAY_TAG_PREFIX}.*" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TODAY_TAG" ]; then
            MICRO=0
          else
            MICRO=$(echo "$LATEST_TODAY_TAG" | cut -d'.' -f4)
            MICRO=$((MICRO + 1))
          fi
          
          VERSION="${YEAR}.${MONTH}.${DAY}.${MICRO}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"
          
      - name: Check if release needed
        id: check_release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          FORCE_RELEASE="${{ github.event.inputs.force_release }}"
          
          # Check if tag already exists
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "Tag v${VERSION} already exists"
            echo "create_release=false" >> $GITHUB_OUTPUT
          elif [ "$FORCE_RELEASE" = "true" ]; then
            echo "Force release requested"
            echo "create_release=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "Push trigger detected, creating release"
            echo "create_release=true" >> $GITHUB_OUTPUT
          else
            echo "No release needed"
            echo "create_release=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Create release notes
        id: release_notes
        if: steps.check_release.outputs.create_release == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "üìù Generating release notes from CHANGELOG.md..."
          
          # Make script executable and run it
          chmod +x scripts/extract-release-notes.sh
          
          # Extract release notes from changelog
          ./scripts/extract-release-notes.sh "$VERSION" "${{ github.repository }}"
          
          # If release notes extraction failed, create basic notes
          if [ ! -f "release_notes.md" ] || [ ! -s "release_notes.md" ]; then
            echo "‚ö†Ô∏è Could not extract from CHANGELOG.md, creating basic release notes..."
            
            # Get the latest tag for changelog generation
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            
            echo "# Release v$VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "## Changes" >> release_notes.md
            
            if [ -n "$LATEST_TAG" ]; then
              echo "" >> release_notes.md
              echo "Changes since $LATEST_TAG:" >> release_notes.md
              echo "" >> release_notes.md
              git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" >> release_notes.md || echo "- Updated Trivy scanning templates" >> release_notes.md
            else
              echo "" >> release_notes.md
              echo "- Initial release of Trivy scanning templates" >> release_notes.md
            fi
            
            # Add template files section
            echo "" >> release_notes.md
            echo "## üì¶ Template Files" >> release_notes.md
            echo "" >> release_notes.md
            echo "This release includes the following template files:" >> release_notes.md
            echo "" >> release_notes.md
            echo "- \`trivy-scanning.template.yaml\` (üîç **Scanning workflow template**)" >> release_notes.md
            echo "- \`trivy.default.yaml\` (üìã **Configuration template**)" >> release_notes.md
            echo "" >> release_notes.md
            echo "## üöÄ Usage" >> release_notes.md
            echo "" >> release_notes.md
            echo "\`\`\`yaml" >> release_notes.md
            echo "include:" >> release_notes.md
            echo "  - remote: 'https://github.com/${{ github.repository }}/releases/download/v$VERSION/trivy-scanning.template.yaml'" >> release_notes.md
            echo "\`\`\`" >> release_notes.md
          fi
          
          echo "‚úÖ Release notes prepared"
          
      - name: Prepare release templates
        if: steps.check_release.outputs.create_release == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "üîß Preparing templates for release v${VERSION}..."
          
          # Update outdated version numbers in template files to the new release version
          for file in trivy-scanning.template.yaml config-checks.template.yaml license-checks.template.yaml security-checks.template.yaml; do
            if [ -f "$file" ]; then
              # Update TRIVY_TEMPLATE_VERSION variable
              sed -i "s|TRIVY_TEMPLATE_VERSION: \"v[0-9.]*\"|TRIVY_TEMPLATE_VERSION: \"v${VERSION}\"|g" "$file"
            fi
          done

          echo "‚úÖ Release templates prepared with updated TRIVY_TEMPLATE_VERSION and version-specific URLs."
          echo "üìã New version is v${VERSION}"

      - name: Update README files with release URLs
        if: steps.check_release.outputs.create_release == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          REPO="${{ github.repository }}"

          echo "üìù Updating README files with release URLs for $REPO v$VERSION..."

          # Update URLs in README.md
          if [ -f "README.md" ]; then
            sed -i "s|https://github.com/[A-Za-z0-9._-]\+/[A-Za-z0-9._-]\+/releases/download/v[0-9.]\+/trivy-scanning.template.yaml|https://github.com/${REPO}/releases/download/v${VERSION}/trivy-scanning.template.yaml|g" README.md
            sed -i "s|https://github.com/[A-Za-z0-9._-]\+/[A-Za-z0-9._-]\+/releases/download/v[0-9.]\+/trivy.default.yaml|https://github.com/${REPO}/releases/download/v${VERSION}/trivy.default.yaml|g" README.md
            sed -i "s|https://github.com/[A-Za-z0-9._-]\+/[A-Za-z0-9._-]\+/releases/download/v[0-9.]\+/config-checks.template.yaml|https://github.com/${REPO}/releases/download/v${VERSION}/config-checks.template.yaml|g" README.md
            sed -i "s|https://github.com/[A-Za-z0-9._-]\+/[A-Za-z0-9._-]\+/releases/download/v[0-9.]\+/license-checks.template.yaml|https://github.com/${REPO}/releases/download/v${VERSION}/license-checks.template.yaml|g" README.md
            sed -i "s|https://github.com/[A-Za-z0-9._-]\+/[A-Za-z0-9._-]\+/releases/download/v[0-9.]\+/security-checks.template.yaml|https://github.com/${REPO}/releases/download/v${VERSION}/security-checks.template.yaml|g" README.md
            echo "‚úÖ README.md updated"
          fi

          # Update URLs in README-en.md
          if [ -f "README-en.md" ]; then
            sed -i "s|https://github.com/[A-Za-z0-9._-]\+/[A-Za-z0-9._-]\+/releases/download/v[0-9.]\+/trivy-scanning.template.yaml|https://github.com/${REPO}/releases/download/v${VERSION}/trivy-scanning.template.yaml|g" README-en.md
            sed -i "s|https://github.com/[A-Za-z0-9._-]\+/[A-Za-z0-9._-]\+/releases/download/v[0-9.]\+/trivy.default.yaml|https://github.com/${REPO}/releases/download/v${VERSION}/trivy.default.yaml|g" README-en.md
            sed -i "s|https://github.com/[A-Za-z0-9._-]\+/[A-Za-z0-9._-]\+/releases/download/v[0-9.]\+/config-checks.template.yaml|https://github.com/${REPO}/releases/download/v${VERSION}/config-checks.template.yaml|g" README-en.md
            sed -i "s|https://github.com/[A-Za-z0-9._-]\+/[A-Za-z0-9._-]\+/releases/download/v[0-9.]\+/license-checks.template.yaml|https://github.com/${REPO}/releases/download/v${VERSION}/license-checks.template.yaml|g" README-en.md
            sed -i "s|https://github.com/[A-Za-z0-9._-]\+/[A-Za-z0-9._-]\+/releases/download/v[0-9.]\+/security-checks.template.yaml|https://github.com/${REPO}/releases/download/v${VERSION}/security-checks.template.yaml|g" README-en.md
            echo "‚úÖ README-en.md updated"
          fi

          echo "üìã README files updated with release asset URLs"
          
      - name: Create GitHub Release
        if: steps.check_release.outputs.create_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.version.outputs.version }}"
          name: "Release v${{ steps.version.outputs.version }}"
          body_path: "release_notes.md"
          draft: false
          prerelease: false
          files: |
            trivy-scanning.template.yaml
            trivy.default.yaml
            config-checks.template.yaml
            license-checks.template.yaml
            security-checks.template.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Output release information
        if: steps.check_release.outputs.create_release == 'true'
        run: |
          echo "‚úÖ Release v${{ steps.version.outputs.version }} created successfully!"
          echo "üì¶ Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"
          echo ""
          echo "üîó Template URLs:"
          echo "   ‚úÖ trivy-scanning.template.yaml (RECOMMENDED): https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/trivy-scanning.template.yaml"
          echo "   üìã trivy.default.yaml (CONFIG): https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/trivy.default.yaml"
          echo "   ‚ö†Ô∏è  config-checks.template.yaml (DEPRECATED): https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/config-checks.template.yaml"
          echo "   ‚ö†Ô∏è  license-checks.template.yaml (DEPRECATED): https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/license-checks.template.yaml"
          echo "   ‚ö†Ô∏è  security-checks.template.yaml (DEPRECATED): https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/security-checks.template.yaml"
          
      - name: Update changelog for next development
        if: steps.check_release.outputs.create_release == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "üìù Updating changelogs for next development cycle..."
          
          # Make script executable and run it
          chmod +x scripts/update-changelog.sh
          ./scripts/update-changelog.sh "$VERSION"
          
          # Commit the updated changelogs back to the repository
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet CHANGELOG.md CHANGELOG-en.md; then
            echo "‚ÑπÔ∏è No changes to changelog files"
          else
            git add CHANGELOG.md CHANGELOG-en.md
            git commit -m "chore: update changelogs for v$VERSION release [skip ci]"
            
            git push origin main || git push origin master || echo "‚ö†Ô∏è Could not push changelog update"
            echo "‚úÖ Changelogs updated and pushed to repository"
          fi
